//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Entity;

using Rock.Data;
using Rock.Financial;

namespace Rock.Model
{
    /// <summary>
    /// FinancialTransaction Service class
    /// </summary>
    public partial class FinancialTransactionService : Service<FinancialTransaction>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialTransactionService"/> class
        /// </summary>
        /// <param name="context">The context.</param>
        public FinancialTransactionService(RockContext context) : base(context)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( FinancialTransaction item, out string errorMessage )
        {
            errorMessage = string.Empty;
 
            if ( new Service<FinancialTransactionRefund>( Context ).Queryable().Any( a => a.OriginalTransactionId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", FinancialTransaction.FriendlyTypeName, FinancialTransactionRefund.FriendlyTypeName );
                return false;
            }  
            return true;
        }

        /// <summary>
        /// Creates a transaction by processing giving information that is handled by the given gateway. 
        /// </summary>
        /// <param name="args">The details used to process the transaction</param>
        /// <returns></returns>
        public FinancialTransaction ProcessTransaction( ProcessTransactionArgs args )
        {
            var rockContext = ( RockContext ) Context;

            // Get and validate the person
            var personAliasService = new PersonAliasService( rockContext );
            var authorizedPerson = personAliasService.GetPersonNoTracking( args.AuthorizedPersonAliasId );

            if ( authorizedPerson == null )
            {
                throw new Exception( "The authorizedPersonAliasId did not resolve to a person" );
            }

            // Get and validate the gateway
            var financialGatewayService = new FinancialGatewayService( rockContext );
            var financialGateway = financialGatewayService.GetNoTracking( args.GatewayId );

            if ( financialGateway == null )
            {
                throw new Exception( "The gatewayId did not resolve" );
            }

            var financialGatewayComponent = financialGateway.GetGatewayComponent() as ThreeStepGatewayComponent;

            if ( financialGateway == null )
            {
                throw new Exception( "The gateway failed to produce a three step gateway component" );
            }

            // Validate the transaction details
            if ( args.TransactionDetails == null || !args.TransactionDetails.Any() )
            {
                throw new Exception( "At least one item is required in the TransactionDetails" );
            }

            var financialAccountService = new FinancialAccountService( rockContext );
            var totalAmount = 0m;

            foreach ( var transactionDetail in args.TransactionDetails )
            {
                if ( transactionDetail.Amount <= 0m )
                {
                    throw new Exception( "The amount must be greater than $0" );
                }

                var financialAccount = financialAccountService.GetNoTracking( transactionDetail.AccountId );

                if ( financialAccount == null )
                {
                    throw new Exception( string.Format( "The accountId '{0}' did not resolve", transactionDetail.AccountId ) );
                }

                if ( !financialAccount.IsActive )
                {
                    throw new Exception( string.Format( "The account '{0}' is not active", transactionDetail.AccountId ) );
                }

                totalAmount += transactionDetail.Amount;
            }

            if ( totalAmount < 1m )
            {
                throw new Exception( "The total amount must be at least $1" );
            }

            // Validate the person saved account id
            var financialPersonSavedAccountService = new FinancialPersonSavedAccountService( rockContext );
            var savedAccountQry = financialPersonSavedAccountService.GetByPersonId( authorizedPerson.Id ).AsNoTracking();
            FinancialPersonSavedAccount savedAccount = null;

            if ( args.FinancialPersonSavedAccountId.HasValue )
            {
                savedAccount = savedAccountQry.FirstOrDefault( sa => sa.Id == args.FinancialPersonSavedAccountId.Value );

                if ( savedAccount == null )
                {
                    throw new Exception( string.Format( "The saved account '{0}' does not exist for the person", args.FinancialPersonSavedAccountId.Value ) );
                }
            }
            else
            {
                savedAccount = savedAccountQry.FirstOrDefault( sa => sa.IsDefault ) ?? savedAccountQry.FirstOrDefault();

                if ( savedAccount == null )
                {
                    throw new Exception( string.Format( "The given person does not have a saved account" ) );
                }
            }

            var paymentInfo = savedAccount.GetReferencePayment();

            if (paymentInfo == null)
            {
                throw new Exception( string.Format( "The saved account failed to produce payment info" ) );
            }

            // Charge it
            paymentInfo.Amount = totalAmount;
            paymentInfo.Email = authorizedPerson.Email;
            //paymentInfo.AdditionalParameters = financialGatewayComponent.GetStep1Parameters( ResolveRockUrlIncludeRoot( "~/GatewayStep2Return.aspx" ) );

            financialGatewayComponent.ChargeStep1( financialGateway, paymentInfo, out var errorMessage );

            if ( errorMessage != null )
            {
                throw new Exception( string.Format( "Error within step 1: {0}", errorMessage ) );
            }

            return null;
        }

        public class ProcessTransactionArgs {
            /// <summary>
            /// The alias id of the person associated with this financial transaction
            /// </summary>
            public int AuthorizedPersonAliasId { get; set; }

            /// <summary>
            /// The id of the gateway to use when processing the transaction
            /// </summary>
            public int GatewayId { get; set; }

            /// <summary>
            /// The details of the transaction. Details include financial account id and corresponding amount
            /// </summary>
            public ICollection<ProcessTransactionDetailArgs> TransactionDetails { get; set; }

            /// <summary>
            /// The saved account id associated with the given person. If null, the person's default payment method will be applied instead
            /// </summary>
            public int? FinancialPersonSavedAccountId { get; set; }

            /// <summary>
            /// Is this transaction to be shown as anonymous
            /// </summary>
            public bool ShowAsAnonymous { get; set; }

            public class ProcessTransactionDetailArgs
            {
                /// <summary>
                /// Gets or sets the AccountId of the <see cref="Rock.Model.FinancialAccount"/>/account that that the transaction detail <see cref="Amount"/> should be directed toward.
                /// </summary>
                /// <value>
                /// A <see cref="System.Int32"/> representing the AccountId of the <see cref="Rock.Model.FinancialAccount"/>/account that this transaction detail is directed toward.
                /// </value>
                public int AccountId { get; set; }

                /// <summary>
                /// Gets or sets the purchase/gift amount.
                /// </summary>
                /// <value>
                /// A <see cref="System.Decimal"/> representing the purchase/gift amount.
                /// </value>
                public decimal Amount { get; set; }
            }
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static partial class FinancialTransactionExtensionMethods
    {
        /// <summary>
        /// Clones this FinancialTransaction object to a new FinancialTransaction object
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
        /// <returns></returns>
        public static FinancialTransaction Clone( this FinancialTransaction source, bool deepCopy )
        {
            if (deepCopy)
            {
                return source.Clone() as FinancialTransaction;
            }
            else
            {
                var target = new FinancialTransaction();
                target.CopyPropertiesFrom( source );
                return target;
            }
        }

        /// <summary>
        /// Copies the properties from another FinancialTransaction object to this FinancialTransaction object
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="source">The source.</param>
        public static void CopyPropertiesFrom( this FinancialTransaction target, FinancialTransaction source )
        {
            target.Id = source.Id;
            target.AuthorizedPersonAliasId = source.AuthorizedPersonAliasId;
            target.BatchId = source.BatchId;
            target.CheckMicrEncrypted = source.CheckMicrEncrypted;
            target.CheckMicrHash = source.CheckMicrHash;
            target.CheckMicrParts = source.CheckMicrParts;
            target.FinancialGatewayId = source.FinancialGatewayId;
            target.FinancialPaymentDetailId = source.FinancialPaymentDetailId;
            target.ForeignGuid = source.ForeignGuid;
            target.ForeignKey = source.ForeignKey;
            target.IsReconciled = source.IsReconciled;
            target.IsSettled = source.IsSettled;
            target.MICRStatus = source.MICRStatus;
            target.ProcessedByPersonAliasId = source.ProcessedByPersonAliasId;
            target.ProcessedDateTime = source.ProcessedDateTime;
            target.ScheduledTransactionId = source.ScheduledTransactionId;
            target.SettledDate = source.SettledDate;
            target.SettledGroupId = source.SettledGroupId;
            target.ShowAsAnonymous = source.ShowAsAnonymous;
            target.SourceTypeValueId = source.SourceTypeValueId;
            target.Status = source.Status;
            target.StatusMessage = source.StatusMessage;
            target.Summary = source.Summary;
            target.TransactionCode = source.TransactionCode;
            target.TransactionDateTime = source.TransactionDateTime;
            target.TransactionTypeValueId = source.TransactionTypeValueId;
            target.CreatedDateTime = source.CreatedDateTime;
            target.ModifiedDateTime = source.ModifiedDateTime;
            target.CreatedByPersonAliasId = source.CreatedByPersonAliasId;
            target.ModifiedByPersonAliasId = source.ModifiedByPersonAliasId;
            target.Guid = source.Guid;
            target.ForeignId = source.ForeignId;

        }
    }
}
